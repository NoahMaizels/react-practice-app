{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetch","require","cities","beijing","shanghai","chengdu","tokyo","newYork","proxy","baseUrl","apiKey","startingUrl","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","country","temperature","forecast","handleLocationChange","bind","assertThisInitialized","getWeather","buildUrl","cityCode","url","_this2","then","response","json","data","console","log","setState","name","Math","floor","list","main","temp","weather","description","event","target","value","react_default","a","createElement","className","id","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAEMA,SAAQC,EAAQ,KAElBC,EAAS,CACXC,QAAS,UACTC,SAAU,UACVC,QAAS,UACTC,MAAO,UACPC,QAAS,WAELC,EAAQ,uCACRC,EAAU,+CACVC,EAAS,0CACXC,EAAcH,EAAQC,EAAUP,EAAOE,SAAWM,EA6EvCE,cA1Eb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACTC,KAAM,UACNC,QAAS,UACTC,YAAa,UACbC,SAAU,WAEdX,EAAKY,qBAAuBZ,EAAKY,qBAAqBC,KAA1BZ,OAAAa,EAAA,EAAAb,CAAAD,IAC5BA,EAAKe,WAAaf,EAAKe,WAAWF,KAAhBZ,OAAAa,EAAA,EAAAb,CAAAD,IAClBA,EAAKgB,SAAWhB,EAAKgB,SAASH,KAAdZ,OAAAa,EAAA,EAAAb,CAAAD,IAVHA,wEAaJiB,GACP,OAAOtB,EAAQC,EAAUqB,EAAWpB,qCAG3BqB,GAAI,IAAAC,EAAAhB,KACbhB,EAAM+B,GACLE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZJ,EAAKO,SAAS,CACZlB,KAAMe,EAAKf,KAAKmB,KAChBlB,QAASc,EAAKf,KAAKC,QACnBC,YAAakB,KAAKC,MAAMN,EAAKO,KAAK,GAAGC,KAAKC,KAAO,QACjDrB,SAAUY,EAAKO,KAAK,GAAGG,QAAQ,GAAGC,4DAMtC/B,KAAKY,WAAWjB,gDAGGqC,GACnBhC,KAAKuB,SAAS,CACZlB,KAAM,UACNC,QAAS,UACTC,YAAa,UACbC,SAAU,YAEZR,KAAKY,WAAWZ,KAAKa,SAAS3B,EAAO8C,EAAMC,OAAOC,0CAIlD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,oBACNJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,UAAyCtC,KAAKI,MAAMC,MACzD8B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,aAA4CtC,KAAKI,MAAME,SAC5D6B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,iBAAgDtC,KAAKI,MAAMG,aAChE4B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,cAA6CtC,KAAKI,MAAMI,WAI/D2B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACRJ,EAAAC,EAAAC,cAAA,UACEH,MAAOlC,KAAKI,MAAMC,KAClBmC,SAAUxC,KAAKS,sBAEf0B,EAAAC,EAAAC,cAAA,UAAQH,MAAM,YAAd,YACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,YACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,WACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,qBAlEMO,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.9f5444c4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nconst fetch = require(\"node-fetch\")\n\nlet cities = {\n  beijing: \"2038349\",\n  shanghai: \"1796236\",\n  chengdu: \"1815286\",\n  tokyo: \"1850147\",\n  newYork: \"5128638\",\n}\nconst proxy = \"https://cors-anywhere.herokuapp.com/\"\nconst baseUrl = \"api.openweathermap.org/data/2.5/forecast?id=\"\nconst apiKey = \"&appid=45c646d31cfd97308889a2add1005b9d\"\nlet startingUrl = proxy + baseUrl + cities.shanghai + apiKey\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      city: \"loading\",\n      country: \"loading\",\n      temperature: \"loading\",\n      forecast: \"loading\",\n    }\n  this.handleLocationChange = this.handleLocationChange.bind(this)\n  this.getWeather = this.getWeather.bind(this)\n  this.buildUrl = this.buildUrl.bind(this)\n  }\n  \n  buildUrl(cityCode){\n    return proxy + baseUrl + cityCode + apiKey\n  }\n\n  getWeather(url){\n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      this.setState({\n        city: data.city.name,\n        country: data.city.country,\n        temperature: Math.floor(data.list[0].main.temp - 272.15),\n        forecast: data.list[0].weather[0].description,\n      })\n    })\n  }\n\n  componentDidMount(){\n    this.getWeather(startingUrl)\n  }\n\n  handleLocationChange(event) {\n    this.setState({\n      city: \"loading\",\n      country: \"loading\",\n      temperature: \"loading\",\n      forecast: \"loading\",\n    });\n    this.getWeather(this.buildUrl(cities[event.target.value]))\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <div id=\"weatherContainer\">\n            <h1>Weather App</h1>\n            <div><span className=\"infoItem\">City: </span>{this.state.city}</div>\n            <div><span className=\"infoItem\">Country: </span>{this.state.country}</div>\n            <div><span className=\"infoItem\">Temperature: </span>{this.state.temperature}</div>\n            <div><span className=\"infoItem\">Forecast: </span>{this.state.forecast}</div>\n\n\n          </div>\n          <div id=\"citySelector\">\n          <select \n            value={this.state.city} \n            onChange={this.handleLocationChange}\n          >\n            <option value=\"shanghai\">Shanghai</option>\n            <option value=\"newYork\">New York</option>\n            <option value=\"chengdu\">Chengdu</option>\n            <option value=\"beijing\">Beijing</option>\n          </select>\n          </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}