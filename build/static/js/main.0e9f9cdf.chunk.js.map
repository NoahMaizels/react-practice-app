{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetch","require","cities","Beijing Shi","Shanghai","Chengdu","Tokyo","New York","proxy","baseUrl","apiKey","process","startingUrl","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","country","temperature","forecast","ready","handleLocationChange","bind","assertThisInitialized","getWeather","buildUrl","cityCode","url","_this2","then","response","json","data","setState","name","Math","floor","list","main","temp","weather","description","event","target","value","react_default","a","createElement","className","id","onChange","react_loader_default","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.0e9f9cdf.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Loader from 'react-loader'\nconst fetch = require('node-fetch')\n\nlet cities = {\n  'Beijing Shi': '2038349',\n  'Shanghai': '1796236',\n  'Chengdu': '1815286',\n  'Tokyo': '1850147',\n  'New York': '5128638',\n}\nconst proxy = 'https://cors-anywhere.herokuapp.com/'\nconst baseUrl = 'api.openweathermap.org/data/2.5/forecast?id='\nconst apiKey = process.env.REACT_APP_API_KEY\nlet startingUrl = proxy + baseUrl + cities['Shanghai'] + apiKey\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      city: 'loading',\n      country: 'loading',\n      temperature: 'loading',\n      forecast: 'loading',\n      ready: false,\n      \n    }\n    this.handleLocationChange = this.handleLocationChange.bind(this)\n    this.getWeather = this.getWeather.bind(this)\n    this.buildUrl = this.buildUrl.bind(this)\n  }\n  \n  buildUrl(cityCode){\n    return proxy + baseUrl + cityCode + apiKey\n  }\n\n  getWeather(url){\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          city: data.city.name,\n          country: data.city.country,\n          temperature: Math.floor(data.list[0].main.temp - 272.15),\n          forecast: data.list[0].weather[0].description,\n          ready: true,\n        })\n      })\n  }\n\n  componentDidMount(){\n    this.getWeather(startingUrl)\n  }\n\n  handleLocationChange(event) {\n    this.setState({ready: false})\n    this.getWeather(this.buildUrl(cities[event.target.value]))\n  }\n\n  render(){\n    if (this.state.ready){\n      return (\n        <div className='App'>\n          <div id='weatherContainer'>\n            <h1>Weather App</h1>\n            <div><span className='infoItem'>City: </span>{this.state.city}</div>\n            <div><span className='infoItem'>Country: </span>{this.state.country}</div>\n            <div><span className='infoItem'>Temperature: </span>{this.state.temperature}&deg;C</div>\n            <div><span className='infoItem'>Forecast: </span>{this.state.forecast}</div>\n\n\n          </div>\n          <div id='citySelector'>\n            <label>\n              <select \n                value={this.state.city} \n                onChange={this.handleLocationChange}\n              >\n                <option value='Shanghai'>Shanghai</option>\n                <option value='New York'>New York</option>\n                <option value='Chengdu'>Chengdu</option>\n                <option value='Beijing Shi'>Beijing</option>\n                <option value='Tokyo'>Tokyo</option>\n              </select>\n            </label>\n            \n          </div>\n        </div>\n      )\n    }\n    else {\n      return (\n        <Loader />\n      )\n    }\n    \n  }\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}